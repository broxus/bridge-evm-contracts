pragma ever-solidity >= 0.62.0;

pragma AbiHeader time;
pragma AbiHeader pubkey;

import "@broxus/contracts/contracts/utils/CheckPubKey.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";

import "./ProxyMultiVaultAlienJetton_MergeRouter.tsol";

contract ProxyMultiVaultAlienJetton is
    ProxyMultiVaultAlienJetton_MergeRouter,
    CheckPubKey,
    RandomNonce
{
    constructor(address owner_) public checkPubKey {
        tvm.accept();

        _reserveTargetBalance();

        setOwnership(owner_);

        owner_.transfer({
            value: 0,
            bounce: false,
            flag: MsgFlag.ALL_NOT_RESERVED
        });
    }

    /// @notice Get current contract API version.
    /// Each time contract is upgraded, API version is incremented.
    /// @return Current API version
    function apiVersion() external override view responsible returns (uint8) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } api_version;
    }

    function upgrade(TvmCell code) external onlyOwner {
        TvmCell data = abi.encode(
            evmConfiguration,
            _randomNonce,
            api_version,
            owner,
            manager,
            mergeRouter,
            mergePool,
            mergePoolPlatform,
            mergePoolVersion
        );

        tvm.setcode(code);
        tvm.setCurrentCode(code);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell data) private {
        (
            EVMConfiguration evmConfiguration_,
            uint _randomNonce_,
            uint8  api_version_,
            address owner_,
            address manager_,
            TvmCell mergeRouter_,
            TvmCell mergePool_,
            TvmCell mergePoolPlatform_,
            uint8 _mergePoolVersion
        ) = abi.decode(data, (
            EVMConfiguration,
            uint,
            uint8,
            address,
            address,
            TvmCell,
            TvmCell,
            TvmCell,
            uint8
        ));

        evmConfiguration = evmConfiguration_;

        _randomNonce = _randomNonce_;
        api_version = api_version_ + 1;
        owner = owner_;

        manager = manager_;
        mergeRouter = mergeRouter_;
        mergePool = mergePool_;
        mergePoolPlatform = mergePoolPlatform_;
        mergePoolVersion = _mergePoolVersion;
    }
}
