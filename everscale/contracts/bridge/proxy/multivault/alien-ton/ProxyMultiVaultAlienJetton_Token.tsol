pragma ever-solidity >= 0.62.0;

import "../../../../utils/jetton/libraries/JettonUtils.tsol";

import "./ProxyMultivaultAlienJetton_Base.tsol";

abstract contract ProxyMultiVaultAlienJetton_Token is ProxyMultivaultAlienJetton {
    function _mintTokens(
        address token,
        uint128 amount,
        address recipient,
        address remainingGasTo,
        TvmCell payload
    ) internal pure {
        JettonUtils.mint(
            token,
            0,
            recipient,
            varUint16(amount),
            varUint16(2100000000),
            0.5 ever,
            payload,
            remainingGasTo,
            0,
            MsgFlag.ALL_NOT_RESERVED,
            false
        );
    }

    /// @notice Deploys Everscale token for any EVM token
    /// @param chainId EVM network chain ID
    /// @param token EVM token address
    /// @param name Token name
    /// @param symbol Token symbol
    /// @param decimals Token decimals
    function deployEVMAlienToken(
        uint256 chainId,
        uint160 token,
        string name,
        string symbol,
        uint8 decimals,
        address
    ) external override reserveAtLeastTargetBalance {
        JettonUtils.deployMinter(
            address(this),
            name,
            symbol,
            decimals,
            chainId,
            token,
            evmConfiguration.alienTokenWalletCode,
            evmConfiguration.alienTokenRootCode,
            evmConfiguration.alienTokenWalletPlatformCode,
            0,
            MsgFlag.ALL_NOT_RESERVED,
            false
        );
    }

    /// @notice Derives root address for alien token, without deploying it
    /// @param chainId EVM network chain ID
    /// @param token EVM token address
    /// @param name Token name
    /// @param symbol Token symbol
    /// @param decimals Token decimals
    function deriveEVMAlienTokenRoot(
        uint256 chainId,
        uint160 token,
        string name,
        string symbol,
        uint8 decimals
    ) public override responsible returns (address) {
        TvmCell stateInit = JettonUtils.buildMinterStateInit(
            address(this),
            name,
            symbol,
            decimals,
            chainId,
            token,
            evmConfiguration.alienTokenWalletCode,
            evmConfiguration.alienTokenRootCode,
            evmConfiguration.alienTokenWalletPlatformCode
        );

        return {
            value: 0,
            bounce: false,
            flag: MsgFlag.REMAINING_GAS
        } address(tvm.hash(stateInit));
    }

    /// @notice Deploys Everscale token for any Solana token
    /// @param token Solana token address
    /// @param name Token name
    /// @param symbol Token symbol
    /// @param decimals Token decimals
    function deploySolanaAlienToken(
        uint256 token,
        string name,
        string symbol,
        uint8 decimals,
        address
    ) external override reserveAtLeastTargetBalance {
        JettonUtils.deployMinter(
            address(this),
            name,
            symbol,
            decimals,
            900,
            token,
            solanaConfiguration.alienTokenWalletCode,
            solanaConfiguration.alienTokenRootCode,
            solanaConfiguration.alienTokenWalletPlatformCode,
            0,
            MsgFlag.ALL_NOT_RESERVED,
            false
        );
    }

    /// @notice Derives root address for alien token, without deploying it
    /// @param token Solana token address
    /// @param name Token name
    /// @param symbol Token symbol
    /// @param decimals Token decimals
    function deriveSolanaAlienTokenRoot(
        uint256 token,
        string name,
        string symbol,
        uint8 decimals
    ) public override responsible returns (address) {
        TvmCell stateInit = JettonUtils.buildMinterStateInit(
            address(this),
            name,
            symbol,
            decimals,
            900,
            token,
            solanaConfiguration.alienTokenWalletCode,
            solanaConfiguration.alienTokenRootCode,
            solanaConfiguration.alienTokenWalletPlatformCode
        );

        return {
            value: 0,
            bounce: false,
            flag: MsgFlag.REMAINING_GAS
        } address(tvm.hash(stateInit));
    }
}
