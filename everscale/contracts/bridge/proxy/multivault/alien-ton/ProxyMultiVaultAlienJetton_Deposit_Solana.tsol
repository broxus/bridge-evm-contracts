// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;

import "./ProxyMultiVaultAlienJetton_Token.tsol";

import "../../../interfaces/event-contracts/ISolanaEverscaleEvent.tsol";
import "../../../interfaces/proxy/ISolanaEverscaleProxyExtended.tsol";
import "../../../libraries/EventContractNonce.tsol";

import "../../../../utils/ErrorCodes.tsol";

abstract contract ProxyMultiVaultAlienJetton_Deposit_Solana is
    ProxyMultiVaultAlienJetton_Token,
    ISolanaEverscaleProxyExtended
{
    /// @notice Handles alien token transfer from Solana. Token address is derived automatically and MUST
    /// be deployed before. See note on `deployAlienToken`
    /// @param remainingGasTo Gas back address
    function onSolanaEventConfirmedExtended(
        ISolanaEverscaleEvent.SolanaEverscaleEventInitData eventInitData,
        TvmCell meta,
        address remainingGasTo
    ) external override reserveAtLeastTargetBalance {
        require(solanaConfiguration.solanaConfiguration == msg.sender, ErrorCodes.NOT_SOLANA_CONFIG);

        (
            address token,
            uint128 amount,
            address recipient,
            TvmCell payload
        ) = abi.decode(meta, (
            address,
            uint128,
            address,
            TvmCell
        ));

        uint32 nonce = EventContractNonce._calculateNonce(eventInitData);

        _mintTokens(
            token,
            amount,
            recipient,
            remainingGasTo,
            abi.encode(nonce, payload)
        );
    }
}
