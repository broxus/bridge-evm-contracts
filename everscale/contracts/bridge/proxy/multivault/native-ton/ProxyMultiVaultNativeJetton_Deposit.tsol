pragma ever-solidity >= 0.62.0;

import "../../../interfaces/event-contracts/IEthereumEverscaleEvent.tsol";
import "../../../interfaces/proxy/IEthereumEverscaleProxyExtended.tsol";
import "../../../libraries/EventContractNonce.tsol";

import "../../../../utils/ErrorCodes.tsol";

import "./ProxyMultiVaultNativeJetton_Withdraw.tsol";

abstract contract ProxyMultiVaultNativeJetton_Deposit is
    IEthereumEverscaleProxyExtended,
    ProxyMultiVaultNativeJetton_Withdraw
{
    /// @notice Handles native token transfer from EVM.
    /// @param remainingGasTo Gas back address
    function onEventConfirmedExtended(
        IEthereumEverscaleEvent.EthereumEverscaleEventInitData eventInitData,
        TvmCell meta,
        address remainingGasTo
    ) external override reserveAtLeastTargetBalance {
        require(
            _isArrayContainsAddress(evmConfiguration.evmConfigurations, msg.sender),
            ErrorCodes.NOT_ETHEREUM_CONFIG
        );

        (
            address token_wallet,
            uint128 amount,
            address recipient,
            TvmCell payload
        ) = abi.decode(meta, (
            address,
            uint128,
            address,
            TvmCell
        ));

        TvmCell transferPayload;

        if (recipient == dex_middleware) {
            transferPayload = payload;
        } else {
            uint32 nonce = EventContractNonce._calculateNonce(eventInitData);

            transferPayload = abi.encode(nonce, payload);
        }

        _transferTokens(
            token_wallet,
            amount,
            recipient,
            remainingGasTo,
            transferPayload
        );
    }

    function _isArrayContainsAddress(
        address[] array,
        address searchElement
    ) private pure returns (bool) {
        for (address value: array) {
            if (searchElement == value) {
                return true;
            }
        }

        return false;
    }
}
