pragma ever-solidity >= 0.62.0;

import "../../../../utils/jetton/interfaces/ITransferNotification.tsol";

import "../../../interfaces/event-contracts/IEverscaleEthereumEvent.tsol";
import "../../../interfaces/event-contracts/IEverscaleSolanaEvent.tsol";

import "../../../interfaces/event-configuration-contracts/IEverscaleSolanaEventConfiguration.tsol";
import "../../../interfaces/event-configuration-contracts/IEverscaleEthereumEventConfiguration.tsol";

import "./ProxyMultiVaultNativeJetton_Base.tsol";

abstract contract ProxyMultiVaultNativeJetton_Withdraw is
    ProxyMultiVaultNativeJetton_Base,
    ITransferNotification
{
    /// @notice Handles incoming token transfer
    /// Initializes native token withdraw
    /// @param _amount Tokens amount
    function transferNotification(
        uint64 /*_callId*/,
        varUint16 _amount,
        address _tokenSender,
        optional(TvmCell) _payload
    ) external override functionID(0x7362d09c) reserveAtLeastTargetBalance {
        address tokenRoot = msg.sender;
        address remainingGasTo = _tokenSender;

        (
            uint32 nonce,
            Network network,
            TvmCell transferPayload
        ) = abi.decode(_payload.get(), (uint32, Network, TvmCell));

        if (network == Network.Solana) {
            (
                uint256 recipient,
                IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executeAccounts,
                bool executePayloadNeeded,
                IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executePayloadAccounts,
                bytes solanaPayload
            ) = abi.decode(transferPayload, (
                uint256,
                IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[],
                bool,
                IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[],
                bytes
            ));

            _deploySolanaEvent(
                nonce,
                tokenRoot,
                _amount,
                recipient,
                _tokenSender,
                remainingGasTo,
                executeAccounts ,
                executePayloadNeeded,
                executePayloadAccounts,
                solanaPayload
            );
        } else if (network == Network.EVM) {
            (
                uint160 recipient,
                uint256 chainId,
                EVMCallback callback
            ) = abi.decode(transferPayload, (uint160, uint256, EVMCallback));

            _deployEVMEvent(
                nonce,
                tokenRoot,
                chainId,
                _amount,
                recipient,
                remainingGasTo,
                _tokenSender,
                callback
            );
        }
    }

    function _deploySolanaEvent(
        uint32 nonce,
        address token,
        uint128 amount,
        uint256 recipient,
        address sender,
        address remainingGasTo,
        IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executeAccounts,
        bool executePayloadNeeded,
        IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executePayloadAccounts,
        bytes solanaPayload
    ) internal view {
        TvmCell eventData = abi.encode(
            nonce,
            address(this), // Proxy address
            msg.sender, // Token wallet address, must be validated in the event contract
            token, // Token root
            remainingGasTo, // Remaining gas to
            amount, // Amount of tokens to withdraw
            recipient, // Solana recipient address
            sender,
            solanaPayload
        );

        IEverscaleSolanaEvent.EverscaleSolanaEventVoteData eventVoteData = IEverscaleSolanaEvent.EverscaleSolanaEventVoteData(
            tx.timestamp,
            now,
            executeAccounts,
            executePayloadNeeded,
            executePayloadAccounts,
            eventData
        );

        IEverscaleSolanaEventConfiguration(solanaConfiguration.everscaleConfiguration)
            .deployEvent{
                value: 0,
                bounce: false,
                flag: MsgFlag.ALL_NOT_RESERVED
            }(eventVoteData);
    }

    function _deployEVMEvent(
        uint32 nonce,
        address token,
        uint256 chainId,
        uint128 amount,
        uint160 recipient,
        address remainingGasTo,
        address sender,
        EVMCallback callback
    ) internal view {
        TvmCell eventData = abi.encode(
            nonce,
            address(this), // Proxy address
            msg.sender, // Token wallet address, must be validated in the event contract
            token, // Token root
            remainingGasTo, // Remaining gas to
            amount, // Amount of tokens to withdraw
            recipient, // EVM recipient address
            chainId, // EVM network chain ID
            sender,
            callback.recipient,
            callback.payload,
            callback.strict
        );

        IEverscaleEthereumEvent.EverscaleEthereumEventVoteData eventVoteData = IEverscaleEthereumEvent.EverscaleEthereumEventVoteData(
            tx.timestamp,
            now,
            eventData
        );

        IEverscaleEthereumEventConfiguration(evmConfiguration.everscaleConfiguration)
            .deployEvent{
                value: 0,
                bounce: false,
                flag: MsgFlag.ALL_NOT_RESERVED
            }(eventVoteData);
    }
}
