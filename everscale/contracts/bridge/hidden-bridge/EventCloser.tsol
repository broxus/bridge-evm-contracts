pragma ever-solidity >= 0.39.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "@broxus/contracts/contracts/access/ExternalOwner.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";

import "./../../utils/TransferUtils.tsol";

import "./../event-contracts/base/evm/EverscaleEthereumBaseEvent.tsol";


/// @title Event closer
/// @dev Used as part of credit-transfer pipeline, specifically for ever-evm transfers
/// Allows credit backend to call .close on the event contracts, where remainingGasTo = EventCloser
/// Receives the EVERs and immediately transfers them to the EventDeployer contract
contract EventCloser is ExternalOwner, RandomNonce, TransferUtils {
    address public guardian;
    address public deployer;

    constructor(
        address _guardian,
        uint _owner,
        address _deployer
    ) public {
        tvm.accept();

        guardian = _guardian;
        setOwnership(_owner);
        deployer = _deployer;
    }

    function _targetBalance() internal pure override returns (uint128) {
        return 10 ever;
    }

    /// @notice Batch close for ever-evm event-contracts
    /// @dev Can be called only by the external owner
    /// @param events List of event-contracts addresses
    function close(
        address[] events
    ) external view onlyOwner {
        tvm.accept();

        for (address e: events) {
            EverscaleEthereumBaseEvent(e).close{
                bounce: true,
                flag: 0,
                value: 0.1 ever
            }();
        }
    }

    receive() external view reserveTargetBalance {
        deployer.transfer({
            bounce: false,
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED
        });
    }
}
