pragma ever-solidity >= 0.39.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "@broxus/contracts/contracts/access/ExternalOwner.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";

import "./../interfaces/event-contracts/ISolanaEverscaleEvent.tsol";
import "./../interfaces/event-configuration-contracts/ISolanaEverscaleEventConfiguration.tsol";
import "../../utils/ErrorCodes.tsol";


/// @title Event deployer
/// @dev Used as part of credit-transfer pipeline, specifically for evm-ever transfers
/// Allows credit backend to deploy multiple event-contacts at once
contract EventDeployer is ExternalOwner, RandomNonce {
    address public guardian;

    constructor(
        address _guardian,
        uint _owner
    ) public {
        tvm.accept();

        guardian = _guardian;
        setOwnership(_owner);
    }

    struct DeployRequest {
        address configuration;
        ISolanaEverscaleEvent.SolanaEverscaleEventVoteData[] eventsVoteData;
        uint128[] values;
        uint128 value;
    }

    modifier onlyGuardian() {
        require(msg.sender == guardian, ErrorCodes.WRONG_GUARDIAN);

        _;
    }

    function drain(
        address receiver,
        uint128 value
    ) external view onlyGuardian {
        receiver.transfer({
            value: value,
            flag: 0,
            bounce: true
        });
    }

    /// @notice Batch events deployment
    /// @dev Can be called only by external owner
    /// @param requests List of requests, one request per event configuration
    function deployEvents(
        DeployRequest[] requests
    ) external onlyOwner view {
        tvm.accept();

        for (DeployRequest request: requests) {
            ISolanaEverscaleEventConfiguration(request.configuration).deployEvents{
                value: request.value,
                bounce: true,
                flag: 0
            }(request.eventsVoteData, request.values);
        }
    }
}
