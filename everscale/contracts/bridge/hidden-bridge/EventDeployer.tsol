pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;


import "@broxus/contracts/contracts/access/ExternalOwner.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "@broxus/contracts/contracts/utils/CheckPubKey.tsol";

import "./../interfaces/event-contracts/IEthereumEverscaleEvent.tsol";
import "./../interfaces/event-configuration-contracts/IEthereumEverscaleEventConfiguration.tsol";
import "../../utils/ErrorCodes.tsol";

import './EventCreditGas.tsol';


/// @title Event deployer
/// @dev Used as part of credit-transfer pipeline, specifically for evm-ever transfers
/// Allows credit backend to deploy multiple event-contacts at once
contract EventDeployer is ExternalOwner, RandomNonce, CheckPubKey {
    address public static factory;

    constructor(
        uint owner_
    ) public checkPubKey {
        require(msg.sender == factory);
        tvm.accept();

        setOwnership(owner_);
    }

    struct DeployRequest {
        address configuration;
        IEthereumEverscaleEvent.EthereumEverscaleEventVoteData[] eventsVoteData;
        uint128[] values;
        uint128 value;
    }

    function drain(
        address receiver
    ) external view {
        require(msg.sender == factory, 101);

        tvm.rawReserve(EventCreditGas.EVENT_DEPLOYER_INITIAL_BALANCE, 0);

        receiver.transfer({
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        });
    }

    /// @notice Batch events deployment
    /// @dev Can be called only by external owner
    /// @param requests List of requests, one request per event configuration
    function deployEvents(
        DeployRequest[] requests
    ) external onlyOwner view {
        tvm.accept();

        for (DeployRequest request: requests) {
            IEthereumEverscaleEventConfiguration(request.configuration).deployEvents{
                value: request.value,
                bounce: true,
                flag: MsgFlag.IGNORE_ERRORS
            }(request.eventsVoteData, request.values);
        }
    }
}
