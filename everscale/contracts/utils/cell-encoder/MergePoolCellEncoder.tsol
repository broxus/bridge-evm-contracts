pragma ever-solidity >= 0.62.0;

import "../../bridge/interfaces/event-contracts/multivault/evm/IEVMCallback.tsol";
import "../../bridge/interfaces/proxy/INetworks.tsol";
import "../../bridge/interfaces/event-contracts/IEverscaleSolanaEvent.tsol";


abstract contract MergePoolCellEncoder is IEVMCallback, INetworks {
    function encodeMergePoolBurnSwapPayload(
        address targetToken
    ) public pure returns (TvmCell) {
        TvmCell empty;

        return abi.encode(
            uint8(1),
            targetToken,
            empty
        );
    }

    function encodeMergePoolBurnJettonSwapPayload(
        address targetToken,
        address remainingGasTo
    ) public pure returns (TvmCell) {
        TvmCell empty;

        return abi.encode(
            uint32(0),
            uint8(1),
            targetToken,
            empty,
            remainingGasTo
        );
    }

    function encodeMergePoolBurnWithdrawPayloadEthereum(
        address targetToken,
        uint160 recipient,
        EVMCallback callback
    ) public pure returns (TvmCell) {
        TvmCell withdrawPayload = abi.encode(recipient, callback);

        TvmCell operationPayload = abi.encode(Network.EVM, withdrawPayload);

        return abi.encode(
            uint32(0),
            uint8(0),
            targetToken,
            operationPayload
        );
    }

    function encodeMergePoolBurnJettonWithdrawPayloadEthereum(
        address targetToken,
        uint160 recipient,
        EVMCallback callback,
        address remainingGasTo
    ) public pure returns (TvmCell) {
        TvmCell withdrawPayload = abi.encode(recipient, callback);

        TvmCell operationPayload = abi.encode(Network.EVM, withdrawPayload);

        return abi.encode(
            uint32(0),
            uint8(0),
            targetToken,
            operationPayload,
            remainingGasTo
        );
    }

    function encodeMergePoolBurnWithdrawPayloadSolana(
        address targetToken,
        uint256 recipient,
        IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executeAccounts,
        bool executePayloadNeeded,
        IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executePayloadAccounts,
        bytes payload
    ) public pure returns (TvmCell) {
        TvmCell withdrawPayload = abi.encode(recipient, executeAccounts, executePayloadNeeded, executePayloadAccounts, payload);

        TvmCell operationPayload = abi.encode(Network.Solana, withdrawPayload);

        return abi.encode(
            uint32(0),
            uint8(0),
            targetToken,
            operationPayload
        );
    }

    function encodeMergePoolBurnJettonWithdrawPayloadSolana(
        address targetToken,
        uint256 recipient,
        IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executeAccounts,
        bool executePayloadNeeded,
        IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executePayloadAccounts,
        bytes payload,
        address remainingGasTo
    ) public pure returns (TvmCell) {
        TvmCell withdrawPayload = abi.encode(recipient, executeAccounts, executePayloadNeeded, executePayloadAccounts, payload);

        TvmCell operationPayload = abi.encode(Network.Solana, withdrawPayload);

        return abi.encode(
            uint32(0),
            uint8(0),
            targetToken,
            operationPayload,
            remainingGasTo
        );
    }
}
