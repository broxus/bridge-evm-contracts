import { deployments, ethers } from "hardhat";
import { expect } from "chai";

import { Bridge, DAO } from "../../typechain-types";

describe('Test DAO initial setup', () => {
  let bridge: Bridge, dao: DAO;
  
  it('Setup contracts', async () => {
    await deployments.fixture();
    
    bridge = await ethers.getContract('Bridge');
    dao = await ethers.getContract('DAO');
  });
  
  it('Check DAO has correct bridge', async () => {
    expect(await dao.bridge())
      .to.be.equal(await bridge.getAddress(), 'DAO looks at the wrong bridge');
  });
  
  it('Check actual payload decoding', async () => {
    const payload = '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000007bb00000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000003617364000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030102030000000000000000000000000000000000000000000000000000000000';
  
    const decoded = await dao.decodeEthActionsEventData(payload);

    expect(decoded.chainId)
      .to.be.equal(5, 'Wrong chain id');
    expect(decoded.actions)
      .to.have.lengthOf(1, 'Wrong actions length');
    expect(decoded.actions[0].signature)
      .to.be.equal('asd', 'Wrong action signature');
    expect(decoded.actions[0].data)
      .to.be.equal('0x010203','Wrong action data');
  });
});
